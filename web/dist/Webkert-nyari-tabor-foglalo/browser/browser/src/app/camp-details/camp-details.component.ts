import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';
import { Camp } from '../../../../../shared/models/camp/Camp';
import { CampService } from '../../../../../services copy/camp.service';
import { MatDialog } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatToolbar } from '@angular/material/toolbar';
import { MatCard, MatCardActions, MatCardContent, MatCardHeader, MatCardSubtitle, MatCardTitle } from '@angular/material/card';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-camp-details',
  imports: [MatToolbar, MatCard, MatCardHeader, MatCardTitle, MatCardSubtitle, MatCardContent, MatCardActions, CommonModule], // , MatpanelTitle, MatExpansionPanel, MatProgressBar
  templateUrl: './camp-details.component.html',
  styleUrl: './camp-details.component.scss'
})
export class CampDetailsComponent implements OnInit {
  // Bemeneti adatok a sz√ºl≈ë komponenst≈ël
  @Input() campName!: string;
  @Input() capacity!: number;
  @Input() isAvailable!: boolean;

  // Kimeneti esem√©nyek, amiket a gyermek komponens ind√≠t el
  @Output() reserve = new EventEmitter<void>();
  @Output() cancelReservation = new EventEmitter<string>();
  @Output() logView = new EventEmitter<number>();
  camp = {
    name: 'Minta t√°bor',
    description: 'Ez egy p√©lda le√≠r√°s a t√°borr√≥l.'
  };

  camps: Camp[] = [];
  selectedCamp: Camp | null = null;
  isLoading = true;

  constructor(
    private campService: CampService,
    private snackBar: MatSnackBar,
    private dialog: MatDialog
  ) { }

  ngOnInit(): void {
    // üîÑ T√°borok bet√∂lt√©se Firestore-b√≥l
    this.campService.getCamps().subscribe({
      next: (data) => {
        data;
        this.isLoading = false;
      },
      error: (err) => {
        this.snackBar.open('Hiba t√∂rt√©nt a t√°borok bet√∂lt√©sekor.', 'Bez√°r', {
          duration: 3000
        });
        this.isLoading = false;
      }
    });
  }

  // Foglal√°s kezel√©se
  onReserve() {
    // ‚¨ÖÔ∏è Esem√©ny kibocs√°t√°sa a sz√ºl≈ë fel√©
    this.reserve.emit();
  }

  onCancel() {
    // ‚¨ÖÔ∏è A foglal√°s t√∂rl√©se a campName alapj√°n
    this.cancelReservation.emit(this.campName);
  }

  onViewed() {
    // ‚¨ÖÔ∏è Jelz√©s, hogy a felhaszn√°l√≥ megn√©zte a t√°bort (kapacit√°ssal egy√ºtt)
    this.logView.emit(this.capacity);
  }

  // ‚úÖ T√°bor kiv√°laszt√°sa
  selectCamp(camp: Camp): void {
    this.selectedCamp = camp;
  }

  // üóëÔ∏è T√°bor t√∂rl√©se
  deleteCamp(campId: string): void {
    this.campService.deleteCamp(campId).subscribe({
      next: () => {
        this.snackBar.open('T√°bor sikeresen t√∂r√∂lve.', 'Bez√°r', {
          duration: 3000
        });
      },
      error: (err) => {
        this.snackBar.open('Hiba t√∂rt√©nt a t√°bor t√∂rl√©sekor.', 'Bez√°r', {
          duration: 3000
        });
      }
    });
  }
}
